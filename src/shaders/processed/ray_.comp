#version 450

layout(set=1, binding = 1) uniform cameraUniform {
  mat4 view;
  mat4 proj;
  mat4 invViewProj;
  float width;
  float height;
  float nearClip;
  float farClip;
} _MainCamera;

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  uint materialIndex;
};
struct LineVertex {
  vec3 pos;
  vec3 colour;
};

layout(binding = 2, rgba8) uniform writeonly image2D frameBuffer;
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
#define FLT_MAX 1000000.0


float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2, vec3 normal)
{
	      
  float denom = dot(normal, rayDirection);

  float triangleOffset = -dot(normal, v2); //like the planeDist but for the triangle
  float triangleDist = -(dot(normal, rayOrigin) + triangleOffset) / denom; 
		
  bool triangleHitMask = true;

  if (triangleDist < 0.0001)
    return FLT_MAX;
  vec3 planePoint = (rayDirection * triangleDist) + rayOrigin;
  
  vec3 edge0 = v1 - v0;
  vec3 edgePerp = cross(edge0, planePoint - v0);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge1 = v2 - v1;
  edgePerp = cross(edge1, planePoint - v1);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge2 = v0 - v2;
  edgePerp = cross(edge2, planePoint - v2);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);


  if (triangleHitMask)
    return triangleDist;
  else
    return FLT_MAX;
}

float sphereTest(vec3 origin, vec3 direction)
{
  vec3 spherePos = vec3(0.0,0.0,0.0);
  float sphereRadius = 0.1;
  float rayTolerance = 0.000001;
  
  vec3 relativeSpherePos = origin - spherePos;
  float a = dot(direction, direction);
  float b = 2*dot(direction, relativeSpherePos);
  float c = dot(relativeSpherePos, relativeSpherePos) - sphereRadius * sphereRadius;

  float root = b*b - 4*a*c;
  if (root > rayTolerance)
    {
      //lane_f32 farDist = (-b + sqrt(root)) / 2*a;	      
      float nearDist = (-b - sqrt(root)) / 2*a;

      return nearDist;
      //return nearDist / 20.0f;
      /*      bool distMask = (nearDist > minHitDistance) & (nearDist < minDist);
      *dist = nearDist;
      return rootMask & distMask;*/
    }
  return FLT_MAX;
}

float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}


#define MAX_BOUNCE 2
#define SAMPLE_COUNT 1
void main() {

  vec4 o = (_MainCamera.invViewProj * vec4(0.0, 0.0, 0.0, 1.0));
  vec3 origRayOrigin = (o / o.w).xyz;
  vec2 screenCoord = ((gl_GlobalInvocationID.xy / vec2(800.0,800.0)) - 0.5) * 2.0;
  vec4 d = _MainCamera.invViewProj * vec4(screenCoord, 1.0, 1.0);
  vec3 origRayDir = (d / d.w).xyz;
  origRayDir = normalize(origRayDir - origRayOrigin);


  vec4 pixel = vec4(0.0);
  vec4 attenuation = vec4(1.0);
  
  int bounces = 0;
  vec3 rayDir = origRayDir;
  vec3 rayOrigin = origRayOrigin;
  for (int bounce = 0; bounce < MAX_BOUNCE; bounce++)
    {
      float dist = FLT_MAX;
      vec3 bounceNormal = vec3(0.0,0.0,1.0);
      vec4 emitColour = vec4(0.0);
      uint matIndex = -1;
      for (int i = 0; i < 136; i+=3)
	{
	  Vertex v0 = vertices[i + 0];
	  Vertex v1 = vertices[i + 1];
	  Vertex v2 = vertices[i + 2];
	   vec3 normal = vertices[i+0].normal;
	   /*vec3 normal = normalize(cross(v1.position - v0.position,
					v2.position - v0.position
					));*/
	  float testDist = triangleTest(rayOrigin, rayDir,
					v0.position, v1.position, v2.position,
					normal);
	  if (testDist < dist )
	    {
	      matIndex = v0.materialIndex;
	      dist = testDist;
	      bounceNormal = rayDir - 2.0 * normal * dot(rayDir, normal);
	      bounces++;
	    }
	}
      if (dist == FLT_MAX) break;//pixel = vec4(-FLT_MAX);
      
      if (matIndex == 0) //emissive
	{
	  emitColour = vec4(1.0,0.9,0.6,1.0);
	}
      else if (matIndex == 1) //diffuseGrey
	{
	  attenuation *= vec4(0.5,0.5,0.5,1.0);
	}
      else if (matIndex == 2) //red
	{
	  attenuation *= vec4(1.0,0.0,0.0,1.0);
	}
      else if (matIndex == 3) //green
	{
	  attenuation *= vec4(0.0,1.0,0.0,1.0);
	}

      pixel += (emitColour + 0.1) * attenuation;
      //pixel += vec4(rayOrigin + rayDir * dist,1.0);
      //break;
      //pixel = vec4(bounceNormal, 1.0);
      //pixel.r = attenuation.r;
      vec3 randomBounce = normalize(bounceNormal - vec3(rand(rayDir.xy),
							rand(rayDir.xz),
							rand(rayDir.zy)) / 50.0f);
	      
      rayOrigin = rayOrigin + rayDir * dist;
      rayDir = normalize(randomBounce);
    }


  //pixel /= SAMPLE_COUNT;
  //pixel = vec4(pow(pixel.xyz, vec3(1/2.2)),1.0);

  
  imageStore(frameBuffer, ivec2(gl_GlobalInvocationID.xy), pixel);
}
