#version 450

layout(set=1, binding = 1) uniform cameraUniform {
  mat4 view;
  mat4 proj;
    mat4 invProj;	
  mat4 invViewProj;
  float width;
  float height;
  float nearClip;
  float farClip;
} _MainCamera;

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  uint materialIndex;
};
struct LineVertex {
  vec3 pos;
  vec3 colour;
};
struct BVHNode
{
  vec3 min;
  vec3 max;
  int modelMatrixIndex;
  uint triangleCount;
  uint triangleOrChildIndex;
};


layout(set = 0, binding = 2, rgba8) uniform writeonly image2D frameBuffer;
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];   
};
layout(std140, set = 0, binding = 3) readonly buffer BVH {
   BVHNode nodes[];
};
layout(std140, set = 0, binding = 4) readonly buffer ModelMatrices {
   mat4 modelMatrices[];
};

#define FLT_MAX 1000000.0
layout( push_constant ) uniform DebugInfo {
  uint viewMode;
  float triangleLimit;
  float boxLimit;
} debugViewInfo;




struct TraceResult
{
  uint matIndex;
  float dist;
  vec3 bounceNormal;
  vec3 hitNormal;
  uint triangleTests;
  uint boxTests;
};


// Thanks to https://tavianator.com/2011/ray_box.html
float AABBtest(BVHNode b, vec3 rayOrigin, vec3 invRayDir)
{
  vec3 tMin = (b.min - rayOrigin) * invRayDir;
  vec3 tMax = (b.max - rayOrigin) * invRayDir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);

  bool hit = tFar >= tNear && tFar > 0;
  float dst = hit ? tNear > 0 ? tNear : 0 : FLT_MAX;
  return dst;
}
// Thanks to https://stackoverflow.com/a/42752998
float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2)
{
  
  vec3 edgeAB = v1 - v0;
  vec3 edgeAC = v2 - v0;
  vec3 normalVector = cross(edgeAB, edgeAC);
  vec3 ao = rayOrigin - v0;
  vec3 dao = cross(ao, rayDirection);

  
  float determinant = -dot(rayDirection, normalVector);
  float invDet = 1 / determinant;
  
  // Calculate dst to triangle & barycentric coordinates of intersection point
  float dst = dot(ao, normalVector) * invDet;
  float u = dot(edgeAC, dao) * invDet;
  float v = -dot(edgeAB, dao) * invDet;
  float w = 1 - u - v;

  //  TriangleHitInfo hitInfo;
  //hitInfo.didHit = determinant >= 1E-8 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
  
  //  hitInfo.hitPoint = ray.origin + ray.dir * dst;
  //  hitInfo.normal = normalize(tri.normA * w + tri.normB * u + tri.normC * v);
  //  hitInfo.dst = dst;
  bool didHit = determinant >= 1E-8 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
  return didHit ? dst : FLT_MAX;
}

float sphereTest(vec3 origin, vec3 direction)
{
  vec3 spherePos = vec3(0.0,0.0,0.0);
  float sphereRadius = 0.1;
  float rayTolerance = 0.000001;
  
  vec3 relativeSpherePos = origin - spherePos;
  float a = dot(direction, direction);
  float b = 2*dot(direction, relativeSpherePos);
  float c = dot(relativeSpherePos, relativeSpherePos) - sphereRadius * sphereRadius;

  float root = b*b - 4*a*c;
  if (root > rayTolerance)
    {
      //lane_f32 farDist = (-b + sqrt(root)) / 2*a;	      
      float nearDist = (-b - sqrt(root)) / 2*a;

      return nearDist;
      //return nearDist / 20.0f;
      /*      bool distMask = (nearDist > minHitDistance) & (nearDist < minDist);
      *dist = nearDist;
      return rootMask & distMask;*/
    }
  return FLT_MAX;
}

float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}


TraceResult trace(vec3 rayOrigin, vec3 rayDir, float maxDist)
{
  TraceResult result = {-1, min(100000.0, maxDist), vec3(0.0,0.0,0.0),vec3(0.0,1.0,0.0), 0,0};
  
  for (int box = 0; box < 6; box++)
    {
      BVHNode node = nodes[box];
      vec3 rayO = ( modelMatrices[node.modelMatrixIndex + 1] * vec4(rayOrigin,1.0)).xyz;
      vec3 rayD = ( modelMatrices[node.modelMatrixIndex + 1] * vec4(rayDir, 0.0)).xyz;

      vec3 invRayDir = 1.0 / rayD;
      float aabbDist = AABBtest(node, rayO, invRayDir);
      if (aabbDist != FLT_MAX && aabbDist < maxDist)
	{
	  result.boxTests++;
	  //TODO trace function
	  for (uint i = node.triangleOrChildIndex;
	       i < node.triangleOrChildIndex + node.triangleCount;
	       i+=3)

	    {
	      Vertex v0 = vertices[i + 0];
	      Vertex v1 = vertices[i + 1];
	      Vertex v2 = vertices[i + 2];
	      vec3 normal = v0.normal;
	      float testDist = triangleTest(rayO, rayD,
					    v0.position, v1.position, v2.position);
					    //	    normal);
	      result.triangleTests++;
	      vec3 avg = v0.position + v1.position + v2.position / 3.0;
      
	      if (testDist < result.dist && testDist > 1E-8)// && dot(normal, rayDir) < 0.0)
		{
		  result.matIndex = v0.materialIndex;
		  result.dist = testDist;
		  result.bounceNormal = rayDir - 2.0 * normal * dot(rayDir, normal);
		  result.hitNormal = normal;
		}
	    }

	}
    }

  
  return result;
}

#define MAX_BOUNCE 2
#define SAMPLE_COUNT 1
void main() {

  vec4 o = (_MainCamera.invViewProj * vec4(0.0, 0.0, 0.0, 1.0));
  vec3 origRayOrigin = (o / o.w).xyz;
  vec2 screenCoord = ((gl_GlobalInvocationID.xy / vec2(800.0,800.0)) - 0.5) * 2.0;
  vec4 d = _MainCamera.invViewProj * vec4(screenCoord, 1.0, 1.0);
  vec3 origRayDir = (d / d.w).xyz;
  origRayDir = normalize(origRayDir - origRayOrigin);


  vec4 pixel = vec4(0.0);
  vec4 attenuation = vec4(1.0);
  
  uint triangleTests = 0;
  uint boxTests = 0;
  vec3 rayDir = origRayDir;
  vec3 rayOrigin = origRayOrigin;
  for (int bounce = 0; bounce < MAX_BOUNCE; bounce++)
    {
      vec4 emitColour = vec4(0.0);
      TraceResult result = trace(rayOrigin, rayDir, FLT_MAX);
      
      triangleTests += result.triangleTests;
      boxTests += result.boxTests;
      uint matIndex = result.matIndex;
      float dist = result.dist;
      vec3 bounceNormal = result.bounceNormal;
      
      if (dist == FLT_MAX) break;//pixel = vec4(-FLT_MAX);
      
      if (matIndex == 0) //emissive
	{
	  emitColour = vec4(1.0,0.9,0.6,1.0);
	}
      else if (matIndex == 1) //diffuseGrey
	{
	  attenuation *= vec4(0.5,0.5,0.5,1.0);
	}
      else if (matIndex == 2) //red
	{
	  attenuation *= vec4(1.0,0.0,0.0,1.0);
	}
      else if (matIndex == 3) //green
	{
	  attenuation *= vec4(0.0,1.0,0.0,1.0);
	}

      pixel += (emitColour + 0.1) * attenuation;
      vec3 randomBounce = normalize(bounceNormal - vec3(rand(rayDir.xy),
							rand(rayDir.xz),
							rand(rayDir.zy)) / 50.0f);
      
      if (debugViewInfo.viewMode == 1)
	pixel.b = 1 - dist / 10.0;
      
      rayOrigin = rayOrigin + rayDir * dist;
      rayDir = randomBounce;

    }

  if (debugViewInfo.viewMode == 1)
    {
      pixel.g = 0.0;
      pixel.b = boxTests / debugViewInfo.boxLimit;
      pixel.r = triangleTests / debugViewInfo.triangleLimit;
      if (triangleTests > debugViewInfo.triangleLimit || boxTests > debugViewInfo.boxLimit)
	pixel = vec4(1.0);
    }
  //pixel /= SAMPLE_COUNT;
  //pixel = vec4(pow(pixel.xyz, vec3(1/2.2)),1.0);

  
  imageStore(frameBuffer, ivec2(gl_GlobalInvocationID.xy), pixel);
}
