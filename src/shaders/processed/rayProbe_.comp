#version 450

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  uint materialIndex;
};
struct LineVertex {
  vec3 pos;
  vec3 colour;
};
struct BVHNode
{
  vec3 min;
  vec3 max;
  int modelMatrixIndex;
  uint triangleCount;
  uint triangleOrChildIndex;
};



#define FLT_MAX 1000000.0
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
layout(std140, set = 0, binding = 3) readonly buffer BVH {
   BVHNode nodes[];
};
layout(std140, set = 0, binding = 4) readonly buffer ModelMatrices {
   mat4 modelMatrices[];
};

layout(std140, set = 1, binding = 1) writeonly buffer DebugLines {
   LineVertex lines[];
};

layout(set = 0, binding = 2, rgba8) uniform restrict writeonly image2D frameBuffer; //Temp, its from the ray pipeline descriptor set
layout(set = 1, binding = 0, rgba8) uniform restrict image3D probeInfo;
layout(set = 1, binding = 2) uniform sampler3D probeSampler;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout( push_constant ) uniform cascadeConstant {
  int cascade;
  int quadrant;
  float start;
  float end;
  int lineView;
} cascadeInfo;


struct TraceResult
{
  uint matIndex;
  float dist;
  vec3 bounceNormal;
  vec3 hitNormal;
  uint triangleTests;
  uint boxTests;
};


// Thanks to https://tavianator.com/2011/ray_box.html
float AABBtest(BVHNode b, vec3 rayOrigin, vec3 invRayDir)
{
  vec3 tMin = (b.min - rayOrigin) * invRayDir;
  vec3 tMax = (b.max - rayOrigin) * invRayDir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);

  bool hit = tFar >= tNear && tFar > 0;
  float dst = hit ? tNear > 0 ? tNear : 0 : FLT_MAX;
  return dst;
}
// Thanks to https://stackoverflow.com/a/42752998
float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2)
{
  
  vec3 edgeAB = v1 - v0;
  vec3 edgeAC = v2 - v0;
  vec3 normalVector = cross(edgeAB, edgeAC);
  vec3 ao = rayOrigin - v0;
  vec3 dao = cross(ao, rayDirection);

  
  float determinant = -dot(rayDirection, normalVector);
  float invDet = 1 / determinant;
  
  // Calculate dst to triangle & barycentric coordinates of intersection point
  float dst = dot(ao, normalVector) * invDet;
  float u = dot(edgeAC, dao) * invDet;
  float v = -dot(edgeAB, dao) * invDet;
  float w = 1 - u - v;

  //  TriangleHitInfo hitInfo;
  //hitInfo.didHit = determinant >= 1E-8 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
  
  //  hitInfo.hitPoint = ray.origin + ray.dir * dst;
  //  hitInfo.normal = normalize(tri.normA * w + tri.normB * u + tri.normC * v);
  //  hitInfo.dst = dst;
  bool didHit = determinant >= 1E-8 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
  return didHit ? dst : FLT_MAX;
}

float sphereTest(vec3 origin, vec3 direction)
{
  vec3 spherePos = vec3(0.0,0.0,0.0);
  float sphereRadius = 0.1;
  float rayTolerance = 0.000001;
  
  vec3 relativeSpherePos = origin - spherePos;
  float a = dot(direction, direction);
  float b = 2*dot(direction, relativeSpherePos);
  float c = dot(relativeSpherePos, relativeSpherePos) - sphereRadius * sphereRadius;

  float root = b*b - 4*a*c;
  if (root > rayTolerance)
    {
      //lane_f32 farDist = (-b + sqrt(root)) / 2*a;	      
      float nearDist = (-b - sqrt(root)) / 2*a;

      return nearDist;
      //return nearDist / 20.0f;
      /*      bool distMask = (nearDist > minHitDistance) & (nearDist < minDist);
      *dist = nearDist;
      return rootMask & distMask;*/
    }
  return FLT_MAX;
}

float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}


TraceResult trace(vec3 rayOrigin, vec3 rayDir, float maxDist)
{
  TraceResult result = {-1, min(100000.0, maxDist), vec3(0.0,0.0,0.0),vec3(0.0,1.0,0.0), 0,0};
  
  for (int box = 0; box < 6; box++)
    {
      BVHNode node = nodes[box];
      vec3 rayO = ( modelMatrices[node.modelMatrixIndex + 1] * vec4(rayOrigin,1.0)).xyz;
      vec3 rayD = ( modelMatrices[node.modelMatrixIndex + 1] * vec4(rayDir, 0.0)).xyz;

      vec3 invRayDir = 1.0 / rayD;
      float aabbDist = AABBtest(node, rayO, invRayDir);
      if (aabbDist != FLT_MAX && aabbDist < maxDist)
	{
	  result.boxTests++;
	  //TODO trace function
	  for (uint i = node.triangleOrChildIndex;
	       i < node.triangleOrChildIndex + node.triangleCount;
	       i+=3)

	    {
	      Vertex v0 = vertices[i + 0];
	      Vertex v1 = vertices[i + 1];
	      Vertex v2 = vertices[i + 2];
	      vec3 normal = v0.normal;
	      float testDist = triangleTest(rayO, rayD,
					    v0.position, v1.position, v2.position);
					    //	    normal);
	      result.triangleTests++;
	      vec3 avg = v0.position + v1.position + v2.position / 3.0;
      
	      if (testDist < result.dist && testDist > 1E-8)// && dot(normal, rayDir) < 0.0)
		{
		  result.matIndex = v0.materialIndex;
		  result.dist = testDist;
		  result.bounceNormal = rayDir - 2.0 * normal * dot(rayDir, normal);
		  result.hitNormal = normal;
		}
	    }

	}
    }

  
  return result;
}

float pi = 3.14159;
vec3 center = vec3(0.0, 1.0, 0.0); //Todo: uniform
vec3 width = vec3(2.5);

//Get uv in texture, local to quadrant
vec3 worldPosToImageUV(vec3 worldPos, int cascadeIndex)
{
  vec3 probeTexLocation = (worldPos - center) / width;
  probeTexLocation += 0.5;
  int dirCount = int(pow(8, cascadeIndex + 1)); //TODO unhardcode
  int dirTilingCount = int(pow(2, cascadeIndex + 1)); //TODO cube root
      
  //scale down to quadrant 
  vec3 quadrantLocalCoord = probeTexLocation / vec3(dirTilingCount, dirTilingCount, dirTilingCount);
  
  return quadrantLocalCoord;
}

vec3 initialDirs[8] = {
  vec3(-1,-1,-1),
  vec3( 1,-1,-1),
  vec3(-1, 1,-1),
  vec3( 1, 1,-1),
  vec3(-1,-1, 1),
  vec3( 1,-1, 1),
  vec3(-1, 1, 1),
  vec3( 1, 1, 1)
};

vec3 getDirFromIndex(int dirIndex, int cascadeIndex)
{
  int SAMPLE_COUNT = int(pow(8, cascadeIndex + 1)); //8, 64, 64*8
  int tmpIndex = dirIndex;
  int tmpSampleCount = SAMPLE_COUNT;
  int initDirIdx = int(dirIndex*8.0 / tmpSampleCount);
  tmpIndex = dirIndex - initDirIdx * (tmpSampleCount / 8);
  

  vec3 rayDir = initialDirs[initDirIdx];


  float contribution = 0.5;//Arbitrary, higher spreads them out, lower bunches them. This is what looked good for demos/4layers

  tmpSampleCount /= 8;
  for (int i = 0; i < cascadeIndex; i++)
    {
      tmpSampleCount = max(tmpSampleCount, 1);
      int initDirIdx = int(tmpIndex * 8.0 / tmpSampleCount);
      vec3 nextDir = initialDirs[initDirIdx]; 
      tmpIndex -= initDirIdx * tmpSampleCount / 8;
      tmpSampleCount /= 8;
      rayDir += nextDir * contribution;
      contribution *= 0.5;
    }

  rayDir = normalize(rayDir);
  return rayDir;
}

void main() {
  vec4 pixel = vec4(0.0);

  int cascadeIndex = cascadeInfo.cascade;//int(gl_GlobalInvocationID.z);
  int SAMPLE_COUNT = int(pow(8, cascadeIndex + 1)); //8, 64, 64*8
  vec4 radiance = vec4(0.0);
  //determine what quadrant we're in
  //Assume powers of two
  int dirTilingCount = int(pow(2, cascadeIndex + 1)); //2, 4, 8

  
  ivec3 dirTile = ivec3(int(float(gl_GlobalInvocationID.x) / imageSize(probeInfo).x * dirTilingCount),
			int(float(gl_GlobalInvocationID.y) / imageSize(probeInfo).y * dirTilingCount),
			int(float(gl_GlobalInvocationID.z) / imageSize(probeInfo).z * dirTilingCount));
  int dirIndex = dirTile.x + dirTile.y * dirTilingCount + dirTile.z * dirTilingCount * dirTilingCount;

  vec3 rayDir = getDirFromIndex(dirIndex, cascadeIndex);  

  int gridSize = 32 / int(pow(2, cascadeIndex));
  //Where are we inside this quadrant
  //0-quadrantSize in pixels
  ivec3 localInvocation = ivec3(gl_GlobalInvocationID) - dirTile * (imageSize(probeInfo) / dirTilingCount);

  vec3 offset = localInvocation + 0.5;//0.5 to offset to midpoint
  offset /= gridSize;
  offset -= 0.5;
  offset *= width;

  vec3 rayOrigin = center + offset + (rayDir * cascadeInfo.start);
  float maxDist = cascadeInfo.end - cascadeInfo.start;
  vec4 emitColour = vec4(0.0);
  
  TraceResult result = trace(rayOrigin, rayDir, maxDist);
  uint matIndex = result.matIndex;
  float dist = result.dist;

  if (matIndex == 0) //emissive
    {
      emitColour = vec4(1.0,0.9,0.4,1.0) * 10.0;
      //float R = 1.0;//light falloff
      //emitColour /= 1 + (dist * R) * (dist * R);
      pixel = emitColour;
      pixel.a = 1.0;
    }
  else if (matIndex == 1) //diffuseGrey
    {
      pixel = vec4(0.5,0.5,0.5,1.0) * 0.02;
      pixel.a = 1.0;
    }
  else if (matIndex == 2) //red
     {
      pixel = vec4(1.0,0.0,0.0,1.0) * 0.02;
      pixel.a = 1.0;
    }
  else if (matIndex == 3) //green
    {
      pixel = vec4(0.0,1.0,0.0,1.0) * 0.02;
      pixel.a = 1.0;
    }

  //Combine information from previous pass
  if (cascadeIndex < 3 && matIndex == -1)
    {
      vec3 upperCoord = worldPosToImageUV(center + offset, cascadeIndex + 1);
      int upperDirCount = int(pow(8, cascadeIndex + 1 + 1)); //TODO unhardcode
      int upperDirTilingCount = int(pow(2, cascadeIndex + 1 + 1)); //TODO cube root

      vec4 contributingPixel = vec4(0.0);
      int contributingDirs = 0;
      int upperDirIndex = dirIndex * 8;
      for (int dir = upperDirIndex; dir < upperDirIndex + 8; dir++)
	{
	  vec3 quadrantOffset = vec3(dir % upperDirTilingCount,
				     (dir / upperDirTilingCount) % upperDirTilingCount,
				     dir / (upperDirTilingCount * upperDirTilingCount)) / upperDirTilingCount;
	  vec3 texCoord = upperCoord + quadrantOffset;
	  vec4 val = texture(probeSampler, texCoord);
	  contributingPixel += val / 8.0;

	}
      pixel += contributingPixel;

    }
  if (cascadeIndex != 0)
    pixel.a = 1.0;

  //if (cascadeIndex == 0)
    //   pixel.a = 1.0;
  imageStore(probeInfo, ivec3(gl_GlobalInvocationID.xyz), pixel);

  if (cascadeIndex == cascadeInfo.lineView)
  {
    uint linearIdx = (gl_GlobalInvocationID.x +
		      imageSize(probeInfo).y * gl_GlobalInvocationID.y +
		      imageSize(probeInfo).y * imageSize(probeInfo).z * gl_GlobalInvocationID.z 
		      )
      * 2;
    if (matIndex == -1)
      maxDist = 0;
    lines[linearIdx + 0].pos = rayOrigin;
    lines[linearIdx + 0].colour = pixel.rgb;
    lines[linearIdx + 1].pos = rayOrigin + rayDir * maxDist;//dist;
    lines[linearIdx + 1].colour = pixel.rgb;
  }


}
