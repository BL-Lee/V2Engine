#version 450

#include "Vertex.comp"
#include "BVH.comp"

#define FLT_MAX 1000000.0
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
layout(std140, set = 0, binding = 3) readonly buffer BVH {
   BVHNode nodes[];
};
layout(std140, set = 0, binding = 4) readonly buffer ModelMatrices {
   mat4 modelMatrices[];
};
layout(set = 0, binding = 2, rgba8) uniform restrict writeonly image2D frameBuffer; //Temp, its from the ray pipeline descriptor set


layout(std140, set = 1, binding = 1) writeonly buffer DebugLines {
   LineVertex lines[];
};
layout(set = 1, binding = 0, rgba8) uniform restrict image2D probeInfo;
layout(set = 1, binding = 2) uniform sampler2D probeSampler;


layout(set = 2, binding = 0) uniform sampler2D normals;
layout(set = 2, binding = 1) uniform sampler2D worldPos;
layout(set = 2, binding = 2) uniform sampler2D depth;



layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout( push_constant ) uniform cascadeConstant {
  int cascade;
  int quadrant;
  float bilateralBlend;
  float start;
  float end;
  int lineView;
} cascadeInfo;

#include "rayHelpers.comp"

float pi = 3.14159;
vec3 center = vec3(0.0, 1.0, 0.0); //Todo: uniform
vec3 width = vec3(2.5);

/*vec3 initialDirs[4] = {
  vec3( 1, 1, 1),
  vec3(-1, 1,-1),
  vec3(-1,-1, 1),
  vec3( 1,-1,-1),
  };*/
vec3 initialDirs[4] = {
  vec3( 1, 1, 1),
  vec3(-1, 1, -1),
  vec3(-1,-1, 1),
  vec3( 1,-1, -1),
};

vec3 getDirFromIndex(int dirIndex, int cascadeIndex)
{
  int SAMPLE_COUNT = int(pow(4, cascadeIndex + 1)); //8, 64, 64*8
  int tmpIndex = dirIndex;
  int tmpSampleCount = SAMPLE_COUNT;
  int initDirIdx = int(dirIndex*4.0 / tmpSampleCount);
  tmpIndex = dirIndex - initDirIdx * (tmpSampleCount / 4);
  

  vec3 rayDir = initialDirs[initDirIdx];


  float contribution = 0.8;//Arbitrary, higher spreads them out, lower bunches them. This is what looked good for demos/4layers

  tmpSampleCount /= 4;
  for (int i = 0; i < cascadeIndex; i++)
    {
      tmpSampleCount = max(tmpSampleCount, 1);
      int initDirIdx = int(tmpIndex * 4.0 / tmpSampleCount);
      vec3 nextDir = initialDirs[initDirIdx]; 
      tmpIndex -= initDirIdx * tmpSampleCount / 4;
      tmpSampleCount /= 4;
      rayDir += nextDir * contribution;
      contribution *= 0.8;
    }

  rayDir = normalize(rayDir);
  return rayDir;
}

float gaussianKernel[] = {
  1.0/16, 1.0 / 8, 1.0/16,
  1.0/8,  1.0 / 4, 1.0/8,
  1.0/16, 1.0 / 8, 1.0/16
};

vec2 kernelOffsets[] = {
  vec2( 0, 0),
  vec2(-1,-1),
  vec2( 0,-1),
  vec2( 1,-1),
  vec2(-1, 0),
  vec2( 1, 0),
  vec2(-1, 1),
  vec2( 0, 1),
  vec2( 1, 1)
};

vec2 minmaxOffsets[] = {
  vec2(-1,0),
  vec2(0,1),
  vec2(1,0),
  vec2(0,-1),
};
float linearizeDepth(float val)
{
  float zNear = 0.01;
  float zFar = 50.0;
  float linearized =  zNear * zFar / (zFar + val * (zNear - zFar));
  return linearized;// / (zFar - zNear); //0-1
}

float normpdf(float x, float sigma)
{
  return 0.39894*exp(-0.5*x*x/(sigma*sigma)) / sigma;
}
#define kernelRad 2
vec4 texture2DBilateral_cascade_depth(vec2 fuv, vec2 upperFUV, int cascadeIndex)
{
  int dirTilingCount = int(pow(2, cascadeIndex));   
  //TODO: Fix weighting, also
  //Should be getting uv pos from the upperUV
  //  float thisDepth = linearizeDepth(texture(depth, uv).r);
  ivec2 uv = ivec2(fuv * textureSize(depth,0));
  float thisDepth = linearizeDepth(texelFetch(depth, ivec2(uv), 0).r);
  vec3 thisNorm = texelFetch(normals, ivec2(uv), 0).rgb;

  vec4 radiance = vec4(0.0);
  float contributedPixels = 0;

  ivec2 upperUV = ivec2(upperFUV * textureSize(probeSampler,0));

  /*
  for (int j = 0; j < 9; j ++ )
    {
      //      vec2 offset = vec2(i,j)
      vec2 offset = kernelOffsets[j];
      //float neighbouringDepth = texelFetch(depth, ivec2(uv + offset * dirTilingCount),0).r;
      vec3 neighbouringPos = texelFetch(worldPos, ivec2(uv + offset * dirTilingCount),0).rgb;
      float diff = dot(neighbouringPos - thisPos, neighbouringPos - thisPos);
      //float depthDiff = clamp(abs(neighbouringDepth - thisDepth) * cascadeInfo.bilateralBlend, 0, 1);
      //float depthWeighting = 1 - clamp(diff / cascadeInfo.bilateralBlend, 0, 1);
      float depthWeighting = diff > cascadeInfo.bilateralBlend ? 0.0 : 1.0;
  //pfloat depthWeighting = 1.0 - depthDiff;


      float weight = gaussianKernel[j];

      vec4 sampledRad = texelFetch(probeSampler,
				   ivec2(upperUV + offset),0) *
	weight * depthWeighting;
      contributedPixels += depthWeighting * weight;
      radiance += sampledRad;
    }
  */
  float kernel[kernelRad * 2 + 1];

  for (int i = 0; i < kernelRad * 2 + 1; i++)
    {
      kernel[i] = normpdf(i - kernelRad, 10.0);
    }
  for (int i = -kernelRad; i < kernelRad + 1; i++)
    {
      for (int j = -kernelRad; j < kernelRad + 1; j++)
	{
	  vec2 offset = vec2(i,j);

	  vec3 neighbouringNormal = texelFetch(normals, ivec2(uv + offset * dirTilingCount),0).rgb;
	  float normDiff = dot(neighbouringNormal, thisNorm) < 0.9 ? 0.0 : 1.0;
	  if (normDiff == 0.0) continue;
	  
	  float weight = kernel[i + kernelRad] * kernel[j + kernelRad];
	  float neighbouringDepth = linearizeDepth(texelFetch(depth, ivec2(uv + offset * dirTilingCount),0).r);
	  
	  float depthDiff = abs(thisDepth- neighbouringDepth);
	  float dFactor = depthDiff * cascadeInfo.bilateralBlend;
	  float depthWeighting = exp(-(dFactor * dFactor)) * normDiff;

	  
	  
	  vec4 sampledRad = texelFetch(probeSampler,
				       ivec2(upperUV + offset),0) * weight * depthWeighting;
	  contributedPixels += depthWeighting * weight;
	  radiance += sampledRad;
	}
    }
  
  return radiance / contributedPixels;
}
float depthDiffs(vec2 uv, int cascadeIndex)
{

  vec2 depthTexelSize = 1.0 / textureSize(depth,0);
  int dirTilingCount = int(pow(2, cascadeIndex));   
  vec2 cascadeTexelSize = 1.0 / textureSize(probeSampler,0);// / dirTilingCount;


  float thisDepth = linearizeDepth(texelFetch(depth, ivec2(uv * textureSize(depth,0)), 0).r);
  vec4 radiance = vec4(0.0);
  float contributedPixels = 0;
  
  for (int j = 0; j < 9; j ++ )
    {
      vec2 offset = kernelOffsets[j];

      float neighbouringDepth = linearizeDepth(texelFetch(depth, ivec2((uv + offset * cascadeTexelSize * dirTilingCount) * textureSize(depth,0)),0).r);

      float depthDiff = clamp(abs(neighbouringDepth - thisDepth) * cascadeInfo.bilateralBlend, 0, 1);
      
      float depthWeighting = 1.0 - depthDiff;

      float weight = gaussianKernel[j];

      contributedPixels += depthWeighting * weight;
    }
  
  return contributedPixels;
}

void main() {

  vec4 pixel = vec4(0.0);

  int cascadeIndex = cascadeInfo.cascade;

  //determine what quadrant we're in
  //Assume powers of two
  int dirTilingCount = int(pow(2, cascadeIndex)); 
  
  ivec2 dirTile = ivec2(int(float(gl_GlobalInvocationID.x) / imageSize(probeInfo).x * dirTilingCount),
			int(float(gl_GlobalInvocationID.y) / imageSize(probeInfo).y * dirTilingCount));
  vec2 localInvocation = (vec2(gl_GlobalInvocationID.xy) / imageSize(probeInfo)
			  - (vec2(dirTile) / dirTilingCount)) * dirTilingCount;

  //float depthDiffVal = depthDiffs(localInvocation, cascadeIndex + 1);

  //imageStore(probeInfo, ivec2(gl_GlobalInvocationID.xy),vec4(depthDiffVal));
  //return;
    
  
  for (int i = 0; i < 4; i++)
    {
      vec4 radiance = vec4(0.0);
      int dirIndex = ((dirTile.x + dirTile.y * dirTilingCount) * 4) + i;
      vec3 rayDir = getDirFromIndex(dirIndex, cascadeIndex);  

      //Where are we inside this quadrant
      //0-quadrantSize in pixels
  
      vec4 rayOriginV = texelFetch(worldPos, ivec2(localInvocation * textureSize(worldPos,0)),0);
      //vec4 rayOriginV = texture(worldPos, localInvocation);
      if (rayOriginV == vec4(0.0,0.0,0.0,1.0))
	{
	  imageStore(probeInfo, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
	  if (cascadeIndex == cascadeInfo.lineView)
	    {
	      uint linearIdx = (gl_GlobalInvocationID.x +
				imageSize(probeInfo).y * gl_GlobalInvocationID.y
				+ i) * 2;
	      lines[linearIdx + 0].pos = vec3(0.0);
	      lines[linearIdx + 1].pos = vec3(0.0);
	    }

	  continue;
	}
      
      vec3 normal = normalize(texture(normals, localInvocation).rgb);

      uint matIndex = -1;
      if (dot(normal, rayDir) > 1E-8)
	{
	  vec3 rayOrigin = rayOriginV.rgb + (rayDir * cascadeInfo.start);; //+ normal * 0.01;
	  float maxDist = cascadeInfo.end - cascadeInfo.start;
	  vec4 emitColour = vec4(0.0);


	  TraceResult result = trace(rayOrigin, rayDir, maxDist);
	  matIndex = result.matIndex;
	  float dist = result.dist;
	  if (dist > 0.01)
	    {
	      if (matIndex == 0) //emissive
		{
		  emitColour = vec4(1.0,0.9,0.4,1.0) * 20.5;
		  radiance = emitColour;
		}
	      else if (matIndex == 1) //diffuseGrey
		{
		  radiance = vec4(0.5,0.5,0.5,1.0) * 0.5;
		}
	      else if (matIndex == 2) //red
		{
		  radiance = vec4(1.0,0.0,0.0,1.0) * 0.5;
		}
	      else if (matIndex == 3) //green
		{
		  radiance = vec4(0.0,1.0,0.0,1.0) * 0.5;
		}
	      //Naturally falls off from missing rays, changes the attenuation
	      //radiance *= exp(cascadeIndex * 0.2) ;
	      //radiance.a = 1.0;
	    }
	}
      if (cascadeIndex < 4 && matIndex == -1)
	{
	  int upperDirTilingCount = int(pow(2, cascadeIndex + 1)); //TODO cube root

	  vec4 contributingPixel = vec4(0.0);
	  int contributingDirs = 0;
	  int upperDirIndex = dirIndex;
	  vec2 upperDirTile = vec2(upperDirIndex % upperDirTilingCount,
				   upperDirIndex / upperDirTilingCount) / upperDirTilingCount;
	  
	  vec2 texCoord = localInvocation / upperDirTilingCount + upperDirTile;
	  
	  vec4 val = texture2DBilateral_cascade_depth(localInvocation, texCoord, cascadeIndex + 1);
	  //vec4 val = texture2DBilateral_cascade_minmax(localInvocation, texCoord, cascadeIndex + 1);
	  radiance = val;// / 4.0;
	  //	  radiance /= 2.0;
	  /*
	  for (int dir = upperDirIndex; dir < upperDirIndex + 4; dir++)
	    {
	      vec2 upperDirTile = vec2(dir % upperDirTilingCount,
				       dir / upperDirTilingCount) / upperDirTilingCount;
	  
	      vec2 texCoord = localInvocation / upperDirTilingCount + upperDirTile;
	  
	      vec4 val = texture2DBilateral_cascade_depth(localInvocation, texCoord, cascadeIndex + 1);
	      pixel += val / 4.0;
	    }
	  */
	}
      pixel += radiance;
      if (cascadeIndex == cascadeInfo.lineView)
	{
	  uint linearIdx = (i + (gl_GlobalInvocationID.x +
				 imageSize(probeInfo).y * gl_GlobalInvocationID.y)) * 2;
	  //	  lines[linearIdx + 0].pos = rayOrigin;
	  lines[linearIdx + 0].colour = radiance.rgb;

	  //lines[linearIdx + 1].pos = rayOrigin + rayDir * maxDist;//dist;
	  lines[linearIdx + 1].colour = radiance.rgb;

	  lines[linearIdx + 0].pos = rayOriginV.rgb;
	  lines[linearIdx + 1].pos = rayOriginV.rgb + rayDir * 0.02;
	}


    }
  //  if (cascadeIndex != 4)
    pixel /= 4.0;
  //pixel.a = 1.0;  
  //Combine information from previous pass
  if (cascadeIndex == 0)
    pixel.a = 1.0;

  
  //if (cascadeIndex == 0)
    //   pixel.a = 1.0;
  //pixel = vec4(localInvocation,1.0,1.0);
  //pixel = vec4(dirTile / 2.0,1.0,1.0);
  imageStore(probeInfo, ivec2(gl_GlobalInvocationID.xy), pixel);
  
}
