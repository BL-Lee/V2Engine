#version 450

#include "Vertex.comp"
#include "BVH.comp"
#include "DeferredHelpers.comp"
#define FLT_MAX 1000000.0
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
layout(std140, set = 0, binding = 3) readonly buffer BVH {
   BVHNode nodes[];
};
layout(std140, set = 0, binding = 4) readonly buffer ModelMatrices {
   mat4 modelMatrices[];
};
layout(set = 0, binding = 2, rgba8) uniform restrict writeonly image2D frameBuffer; //Temp, its from the ray pipeline descriptor set

layout(set=1, binding = 1) uniform cameraUniform {
  mat4 view;
  mat4 proj;
  mat4 invViewProj;
  float width;
  float height;
  float nearClip;
  float farClip;
} _MainCamera;

/*layout(set = 2, binding = 0) uniform sampler2D normals;
  layout(set = 2, binding = 1) uniform sampler2D worldPos;*/
layout(set = 2, binding = 2) uniform sampler2D depth;
layout(set = 2, binding = 3, rgba32f) uniform image2D normals;
layout(set = 2, binding = 4, rgba32f) uniform image2D albedos;
//layout(set = 2, binding = 2, rgba32f) uniform image2D depth;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "rayHelpers.comp"

void main() {

  vec4 pixel = vec4(0.0);

  vec4 normalVal = imageLoad(normals, ivec2(gl_GlobalInvocationID.xy));
  vec3 normal = normalVal.rgb;
  float reflective = normalVal.a;
  if (reflective < 1.0) return;

  vec2 screenCoord = vec2(gl_GlobalInvocationID.xy) / textureSize(depth,0);
  float depth = texelFetch(depth, ivec2(gl_GlobalInvocationID.xy), 0).r;
  if (1.0 - depth < 1E-10) return; //Hit nothing, NaN depth
  vec3 rayOriginV = worldPosFromDepth(depth, screenCoord, _MainCamera.invViewProj);

  //imageStore(worldPos, ivec2(gl_GlobalInvocationID.xy), vec4(rayOriginV,1.0));
  //imageStore(worldPos, ivec2(gl_GlobalInvocationID.xy), vec4(depth));
  //return;
  
  vec4 o = (_MainCamera.invViewProj * vec4(0.0,0.0,0.0,1.0));
  vec3 eyePos = (o/o.w).xyz;
    
  vec3 incomingRay = normalize( rayOriginV - eyePos );
  vec3 rayDir = (incomingRay) - 2.0 * normal * dot(incomingRay, normal);
  
  
  vec3 rayOrigin = rayOriginV + (rayDir * 0.01);
  vec4 emitColour = vec4(0.0);
  TraceResult result = trace(rayOrigin, rayDir, FLT_MAX);
  float dist = result.dist;
  vec4 loc = vec4(rayOrigin + result.dist * rayDir,1.0);
  uint matIndex = result.matIndex;
  
  vec4 albedo = vec4(0.0);
  if (matIndex == 1) //diffuseGrey
      albedo = vec4(0.5,0.5,0.5,1.0) * 0.2;
  if (matIndex == 2) //diffuseGrey
    albedo = vec4(1.0,0.0,0.0,1.0) * 0.2;
  if (matIndex == 3) //diffuseGrey
    albedo = vec4(0.0,1.0,0.0,1.0) * 0.2;
  if (matIndex == 4) //reflective
    albedo = vec4(1.0,1.0,0.0,1.0);
    
  albedo.a = 1.0;
  albedo += vec4(133, 214, 214, 255) / 255 * 0.5;

  imageStore(albedos, ivec2(gl_GlobalInvocationID.xy), albedo);

  
}
