#version 450

layout(set=1, binding = 1) uniform cameraUniform {
  mat4 view;
  mat4 proj;
    mat4 invProj;	
  mat4 invViewProj;
  float width;
  float height;
  float nearClip;
  float farClip;
} _MainCamera;

#include "Vertex.comp"
#include "BVH.comp"
layout(set = 0, binding = 2, rgba8) uniform writeonly image2D frameBuffer;
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];   
};
layout(std140, set = 0, binding = 3) readonly buffer BVH {
   BVHNode nodes[];
};
layout(std140, set = 0, binding = 4) readonly buffer ModelMatrices {
   mat4 modelMatrices[];
};

#define FLT_MAX 1000000.0
layout( push_constant ) uniform DebugInfo {
  uint viewMode;
  float triangleLimit;
  float boxLimit;
} debugViewInfo;



#include "rayHelpers.comp"

#define MAX_BOUNCE 2
#define SAMPLE_COUNT 1
void main() {

  vec4 o = (_MainCamera.invViewProj * vec4(0.0, 0.0, 0.0, 1.0));
  vec3 origRayOrigin = (o / o.w).xyz;
  vec2 screenCoord = ((gl_GlobalInvocationID.xy / vec2(800.0,800.0)) - 0.5) * 2.0;
  vec4 d = _MainCamera.invViewProj * vec4(screenCoord, 1.0, 1.0);
  vec3 origRayDir = (d / d.w).xyz;
  origRayDir = normalize(origRayDir - origRayOrigin);


  vec4 pixel = vec4(0.0);
  vec4 attenuation = vec4(1.0);
  
  uint triangleTests = 0;
  uint boxTests = 0;
  vec3 rayDir = origRayDir;
  vec3 rayOrigin = origRayOrigin;
  for (int bounce = 0; bounce < MAX_BOUNCE; bounce++)
    {
      vec4 emitColour = vec4(0.0);
      TraceResult result = trace(rayOrigin, rayDir, FLT_MAX);
      
      triangleTests += result.triangleTests;
      boxTests += result.boxTests;
      uint matIndex = result.matIndex;
      float dist = result.dist;
      vec3 bounceNormal = result.bounceNormal;
      
      if (dist == FLT_MAX) break;//pixel = vec4(-FLT_MAX);
      
      if (matIndex == 0) //emissive
	{
	  emitColour = vec4(1.0,0.9,0.6,1.0);
	}
      else if (matIndex == 1) //diffuseGrey
	{
	  attenuation *= vec4(0.5,0.5,0.5,1.0);
	}
      else if (matIndex == 2) //red
	{
	  attenuation *= vec4(1.0,0.0,0.0,1.0);
	}
      else if (matIndex == 3) //green
	{
	  attenuation *= vec4(0.0,1.0,0.0,1.0);
	}

      pixel += (emitColour + 0.1) * attenuation;
      vec3 randomBounce = normalize(bounceNormal - vec3(rand(rayDir.xy),
							rand(rayDir.xz),
							rand(rayDir.zy)) / 50.0f);
      
      if (debugViewInfo.viewMode == 1)
	pixel.b = 1 - dist / 10.0;
      
      rayOrigin = rayOrigin + rayDir * dist;
      rayDir = randomBounce;

    }

  if (debugViewInfo.viewMode == 1)
    {
      pixel.g = 0.0;
      pixel.b = boxTests / debugViewInfo.boxLimit;
      pixel.r = triangleTests / debugViewInfo.triangleLimit;
      if (triangleTests > debugViewInfo.triangleLimit || boxTests > debugViewInfo.boxLimit)
	pixel = vec4(1.0);
    }
  //pixel /= SAMPLE_COUNT;
  //pixel = vec4(pow(pixel.xyz, vec3(1/2.2)),1.0);

  
  imageStore(frameBuffer, ivec2(gl_GlobalInvocationID.xy), pixel);
}
