#version 450

#include "DeferredHelpers.comp"

layout(set = 0, binding = 0) uniform sampler2D normals;
//layout(set = 0, binding = 1) uniform sampler2D albedos;
//layout(set = 0, binding = 2) uniform sampler2D depth;
//layout(set = 0, binding = 4, rgba32f) uniform restrict image2D albedos;
//layout(set = 0, binding = 4, rgba32f) uniform restrict image2D albedos;
layout(set = 2, binding = 0, r32f) uniform readonly image2D depthSlices[4];
layout(set = 2, binding = 1, r32f) uniform writeonly image2D ssaoSlices[4];
layout(set = 2, binding = 2) uniform ssaoMats
{
  vec4 m0;
  vec4 m1;
  vec4 m2;
  vec4 m3;
};
layout(set = 1, binding = 1) uniform cameraUniform {
  mat4 view;
  mat4 proj;
  mat4 invProj;
  mat4 invViewProj;
  float width;
  float height;
  float nearClip;
  float farClip;
} _MainCamera;

layout( push_constant ) uniform ssaoInfo {
  float sigma;
  float beta;
  float alpha;
  float theta;
} aoInfo;


layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
float linearizeDepth(float val)
{
  
  float zNear = 0.01;
  float zFar = 50.0;

  //float z = val * 2.0 - 1.0;
  float z = val;
  return (2.0 * zNear * zFar) / (zFar + zNear - z * (zFar - zNear));

  //float linearized =  zNear * zFar / (zFar + val * (zNear - zFar));
  //return linearized;// / (zFar - zNear); //0-1
}

vec3 offsetst[8] =
  {
    vec3(1.0,0.0,  1.0),
    vec3(0.0,0.2,0.1),
    vec3(0.2,-0.3,0.2),
    vec3(-0.3,0.4,0.3),
    
    vec3(-0.1,0.3,0.4),
    vec3(0.3,-0.1,0.5),
    vec3(-0.5,0.4,0.2),
    vec3(0.2,-0.1,0.7)
  };

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

#define NUM_SAMPLES 3
#define KERNEL_RAD 4
//Alchemy ao, slightly based off of https://gist.github.com/gordonnl/0a604ae7c515978d2e6d
//Should extend to multiple pass using de-interleaved depth buffer
// see https://github.com/Outrider0x400/Unity-AlchemyAmbientObscurance
/*
void main() {

  uint slice = gl_GlobalInvocationID.z;
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
  vec2 uv = vec2(gl_GlobalInvocationID.xy) / imageSize(depthSlices[0]);
  
  float thisDepth = imageLoad(depthSlices[slice], texel).r;
  vec3 thisPos = worldPosFromDepth(thisDepth, uv, _MainCamera.invViewProj);

  ivec2 fullTexel = ivec2(uv * textureSize(normals, 0));
  vec3 normal = texelFetch(normals, fullTexel, 0).rgb;

  float avgDot = 0;
  float sigma = aoInfo.sigma;
  float beta = aoInfo.beta;
  float alpha = aoInfo.alpha;
  //float sampleCount = (KERNEL_RAD * 2) * (KERNEL_RAD * 2) - 1;
  float sampleCount = NUM_SAMPLES;
  float p = 0;
  float o = 0;
  vec4 rotVec = slice == 0 ? m0 :
    slice == 1 ? m1 :
    slice == 2 ? m2 : m3;
  //  vec4 rotVec = m0;

  mat2 rotMat = {vec2(rotVec.x, rotVec.y), vec2(rotVec.z, rotVec.w)};


  vec3 singleTexelOffsetPos = worldPosFromDepth(thisDepth, uv +
						(vec2(1,0) / imageSize(depthSlices[0])),
						_MainCamera.invViewProj);

  float singleTexelOffset = sqrt(dot(thisPos - singleTexelOffsetPos, thisPos - singleTexelOffsetPos));
  float uvOffset = singleTexelOffset;
  
  for (int i = 0; i < NUM_SAMPLES; i++)
  {

    vec2 offset = offsets[i];

    //vec2 rotatedOffset = rotMat * (offset * singleTexelOffset);
    vec2 rotatedOffset = rotMat * (offset);
    ivec2 rotatedTexel = ivec2(texel + rotatedOffset);
    float d = imageLoad(depthSlices[slice], rotatedTexel).r;

    vec3 pos = worldPosFromDepth(d, uv + rotatedOffset / imageSize(depthSlices[0]), _MainCamera.invViewProj);
    vec3 diff = pos - thisPos;

    //float linDepth = linearizeDepth(d);
    float linDepth = d;
    float skip = dot(normalize(diff), normal) < 0.5 ? 0.0 : 1.0;
    skip *= dot(diff, diff) < aoInfo.theta / 1000.0 ? 0.0 : 1.0;
	//float skip = 1.0;
    float alchemyVal = min(max(0, dot(normalize(diff), normal) - thisDepth * beta) /
			   (dot(diff,diff) * alpha + 1e-6), 1.0);
    avgDot += alchemyVal * skip;
  }


  avgDot = max(0.0f, 1.0f - sigma * avgDot / sampleCount);
    //avgDot = 1 - avgDot / (8.0 * 8.0 - 1.0);
  imageStore(ssaoSlices[slice], texel, vec4(avgDot));
    
}
*/
/*
//https://learnopengl.com/Advanced-Lighting/SSAO
void main() {

  uint slice = gl_GlobalInvocationID.z;
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
  vec2 uv = vec2(gl_GlobalInvocationID.xy) / imageSize(depthSlices[0]);

  
  float thisDepth = imageLoad(depthSlices[slice], texel).r;
  vec3 thisPos = worldPosFromDepth(thisDepth, uv, _MainCamera.invViewProj);


  vec3 viewPos = viewPosFromDepth(thisDepth, uv, _MainCamera.invProj);
  ivec2 fullTexel = ivec2(2u * gl_GlobalInvocationID.x + slice % 2u,
			  2u * gl_GlobalInvocationID.y + slice / 2u);

  //  ivec2 fullTexel = ivec2(uv * textureSize(normals, 0));

  vec3 normal = texelFetch(normals, fullTexel, 0).rgb;

  //  vec4 rotVec = slice == 0 ? m0 :
  vec4 rotVec = m1 ;
    //    slice == 1 ? m1 :
    //    slice == 2 ? m2 : m3;
  mat2 rotMat = {vec2(rotVec.x, rotVec.y), vec2(rotVec.z, rotVec.w)};

  
  vec3 randomVec = normalize(vec3(rand(gl_GlobalInvocationID.xy),
				  rand(gl_GlobalInvocationID.yz),
				 rand(gl_GlobalInvocationID.xz)));
			

  // randomVec = normalize(rotVec.xyz);
  vec3 tangent   = normalize(randomVec - normal * dot(randomVec, normal));
  vec3 bitangent = cross(tangent, normal);
  mat3 TBN       = mat3(tangent, bitangent, normal);  
  
  float sampleCount = NUM_SAMPLES;


  float occlusion = 0.0;
  float bias = 0.025;//aoInfo.beta;
  for (int i = 0; i < NUM_SAMPLES; i++)
    {
      // get sample position:
      vec3 samplePos = TBN * offsetst[i];
      float SSAO_RAD = aoInfo.theta;
      samplePos = samplePos * SSAO_RAD + viewPos;

      // project sample position:
      vec4 offset = vec4(samplePos, 1.0);
      offset = _MainCamera.proj * offset;
      offset.xyz /= offset.w;
      offset.xyz = offset.xyz * 0.5 + 0.5;
  
      float sampleDepth = imageLoad(depthSlices[slice],
	ivec2(offset.xy * imageSize(depthSlices[slice]))).r;
      
      sampleDepth = -linearizeDepth(sampleDepth);
      
      //imageStore(albedos, fullTexel, vec4(offset.xy - vec2(gl_GlobalInvocationID.xy) / imageSize(depthSlices[slice]), 1.0,1.0));
      //imageStore(albedos, fullTexel, vec4(-sampleDepth, -samplePos.z, -viewPos.z,1.0));
      //imageStore(albedos, fullTexel, vec4(-sampleDepth,offset.xy,1.0));

      
      // range check & accumulate:
      float rangeCheck = smoothstep(0.0f, 1.0f, SSAO_RAD / abs(viewPos.z - sampleDepth));
      imageStore(albedos, fullTexel, vec4(abs(viewPos.z - sampleDepth),
					  sampleDepth - (samplePos.z + bias),
					  rangeCheck,1.0));
      occlusion += (sampleDepth >= samplePos.z + bias ? 1.0 : 0.0) * rangeCheck;
    }
  occlusion = 1.0 - (occlusion * aoInfo.alpha/ NUM_SAMPLES);

  imageStore(ssaoSlices[slice], texel, vec4(occlusion));
    
}
*/


//https://learnopengl.com/Advanced-Lighting/SSAO
//Also the unity one above
void main() {

  uint slice = gl_GlobalInvocationID.z;
  ivec2 texel = ivec2(gl_GlobalInvocationID.xy);
  vec2 uv = vec2(gl_GlobalInvocationID.xy) / imageSize(depthSlices[0]);

  
  float thisDepth = imageLoad(depthSlices[slice], texel).r;
  vec3 thisPos = worldPosFromDepth(thisDepth, uv, _MainCamera.invViewProj);

  vec3 viewPos = viewPosFromDepth(thisDepth, uv, _MainCamera.invProj);
  ivec2 fullTexel = ivec2(2u * gl_GlobalInvocationID.x + slice % 2u,
			  2u * gl_GlobalInvocationID.y + slice / 2u);

  vec3 normal = texelFetch(normals, fullTexel, 0).rgb;

  vec3 randomVec = normalize(vec3(rand(gl_GlobalInvocationID.xy),
				  rand(gl_GlobalInvocationID.yz),
				 rand(gl_GlobalInvocationID.xz)));
			
  vec3 tangent   = normalize(randomVec - normal * dot(randomVec, normal));
  vec3 bitangent = cross(tangent, normal);
  mat3 TBN       = mat3(tangent, bitangent, normal);  

  float occlusion = 0.0;

  for (int i = 0; i < NUM_SAMPLES; i++)
    {
      // get sample position:
      vec3 samplePos = TBN * offsetst[i];
      float SSAO_RAD = aoInfo.theta;
      samplePos = samplePos * SSAO_RAD + viewPos;

      // project sample position:
      vec4 offset = vec4(samplePos, 1.0);
      offset = _MainCamera.proj * offset;
      offset.xyz /= offset.w;
      offset.xyz = offset.xyz * 0.5 + 0.5;
  
      float sampleDepth = imageLoad(depthSlices[slice],
	ivec2(offset.xy * imageSize(depthSlices[slice]))).r;
      
      vec3 reconstructedPos = worldPosFromDepth(sampleDepth, offset.xy, _MainCamera.invViewProj);

      vec3 diff = reconstructedPos - thisPos;
      float skip = dot(diff, diff) > aoInfo.beta ? 0.0 : 1.0;
      occlusion += smoothstep(0.0,1.0, dot(normalize(diff), normal)) * skip;
    }
  occlusion = 1.0 - (occlusion  / NUM_SAMPLES);

  imageStore(ssaoSlices[slice], texel, vec4(occlusion));
    
}


