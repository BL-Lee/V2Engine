
struct TraceResult
{
  uint matIndex;
  float dist;
  vec3 bounceNormal;
  uint triangleTests;
  uint boxTests;
};


// Thanks to https://tavianator.com/2011/ray_box.html
float AABBtest(BVHNode b, vec3 rayOrigin, vec3 invRayDir)
{
  vec3 tMin = (b.min - rayOrigin) * invRayDir;
  vec3 tMax = (b.max - rayOrigin) * invRayDir;
  vec3 t1 = min(tMin, tMax);
  vec3 t2 = max(tMin, tMax);
  float tNear = max(max(t1.x, t1.y), t1.z);
  float tFar = min(min(t2.x, t2.y), t2.z);

  bool hit = tFar >= tNear && tFar > 0;
  float dst = hit ? tNear > 0 ? tNear : 0 : FLT_MAX;
  return dst;
}
// Thanks to https://stackoverflow.com/a/42752998
float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2)
{
  
  vec3 edgeAB = v1 - v0;
  vec3 edgeAC = v2 - v0;
  vec3 normalVector = cross(edgeAB, edgeAC);
  vec3 ao = rayOrigin - v0;
  vec3 dao = cross(ao, rayDirection);

  
  float determinant = -dot(rayDirection, normalVector);
  float invDet = 1 / determinant;
  
  // Calculate dst to triangle & barycentric coordinates of intersection point
  float dst = dot(ao, normalVector) * invDet;
  float u = dot(edgeAC, dao) * invDet;
  float v = -dot(edgeAB, dao) * invDet;
  float w = 1 - u - v;

  //  TriangleHitInfo hitInfo;
  //hitInfo.didHit = determinant >= 1E-8 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
  
  //  hitInfo.hitPoint = ray.origin + ray.dir * dst;
  //  hitInfo.normal = normalize(tri.normA * w + tri.normB * u + tri.normC * v);
  //  hitInfo.dst = dst;
  bool didHit = determinant >= 1E-8 && dst >= 0 && u >= 0 && v >= 0 && w >= 0;
  return didHit ? dst : FLT_MAX;
}
/*
float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2, vec3 normal)
{
	      
  float denom = dot(normal, rayDirection);

  float triangleOffset = -dot(normal, v2); //like the planeDist but for the triangle
  float triangleDist = -(dot(normal, rayOrigin) + triangleOffset) / denom; 
		
  bool triangleHitMask = true;

  if (triangleDist < 0.00001)
    return FLT_MAX;
  vec3 planePoint = (rayDirection * triangleDist) + rayOrigin;
  
  vec3 edge0 = v1 - v0;
  vec3 edgePerp = cross(edge0, planePoint - v0);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge1 = v2 - v1;
  edgePerp = cross(edge1, planePoint - v1);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge2 = v0 - v2;
  edgePerp = cross(edge2, planePoint - v2);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);


  if (triangleHitMask)
    return triangleDist;
  else
    return FLT_MAX;
}
*/
float sphereTest(vec3 origin, vec3 direction)
{
  vec3 spherePos = vec3(0.0,0.0,0.0);
  float sphereRadius = 0.1;
  float rayTolerance = 0.000001;
  
  vec3 relativeSpherePos = origin - spherePos;
  float a = dot(direction, direction);
  float b = 2*dot(direction, relativeSpherePos);
  float c = dot(relativeSpherePos, relativeSpherePos) - sphereRadius * sphereRadius;

  float root = b*b - 4*a*c;
  if (root > rayTolerance)
    {
      //lane_f32 farDist = (-b + sqrt(root)) / 2*a;	      
      float nearDist = (-b - sqrt(root)) / 2*a;

      return nearDist;
      //return nearDist / 20.0f;
      /*      bool distMask = (nearDist > minHitDistance) & (nearDist < minDist);
      *dist = nearDist;
      return rootMask & distMask;*/
    }
  return FLT_MAX;
}

float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}


TraceResult trace(vec3 rayOrigin, vec3 rayDir, float maxDist)
{
  TraceResult result = {-1, min(100000.0, maxDist), vec3(0.0,1.0,0.0), 0,0};
  
  for (int box = 0; box < 6; box++)
    {
      BVHNode node = nodes[box];
      vec3 rayO = ( modelMatrices[node.modelMatrixIndex + 1] * vec4(rayOrigin,1.0)).xyz;
      vec3 rayD = ( modelMatrices[node.modelMatrixIndex + 1] * vec4(rayDir, 0.0)).xyz;

      vec3 invRayDir = 1.0 / rayD;
      float aabbDist = AABBtest(node, rayO, invRayDir);
      if (aabbDist != FLT_MAX && aabbDist < maxDist)
	{
	  result.boxTests++;
	  //TODO trace function
	  for (uint i = node.triangleOrChildIndex;
	       i < node.triangleOrChildIndex + node.triangleCount;
	       i+=3)

	    {
	      Vertex v0 = vertices[i + 0];
	      Vertex v1 = vertices[i + 1];
	      Vertex v2 = vertices[i + 2];
	      vec3 normal = v0.normal;
	      float testDist = triangleTest(rayO, rayD,
					    v0.position, v1.position, v2.position);
					    //	    normal);
	      result.triangleTests++;
	      vec3 avg = v0.position + v1.position + v2.position / 3.0;
      
	      if (testDist < result.dist && dot(normal, rayDir) < 0.0)
		{
		  result.matIndex = v0.materialIndex;
		  result.dist = testDist;
		  result.bounceNormal = rayDir - 2.0 * normal * dot(rayDir, normal);
		}
	    }

	}
    }

  
  return result;
}
