#version 450

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  uint materialIndex;
};
#define FLT_MAX 1000000.0
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
layout(set = 0, binding = 2, rgba8) uniform writeonly image2D frameBuffer;//Temp
layout(set = 1, binding = 0, rgba8) uniform writeonly image3D probeInfo;
layout(set = 1, binding = 1) uniform sampler3D probeSampler;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2, vec3 normal)
{
	      
  float denom = dot(normal, rayDirection);

  float triangleOffset = -dot(normal, v2); //like the planeDist but for the triangle
  float triangleDist = -(dot(normal, rayOrigin) + triangleOffset) / denom; 
		
  bool triangleHitMask = true;

  if (triangleDist < 0.0001)
    return FLT_MAX;
  vec3 planePoint = (rayDirection * triangleDist) + rayOrigin;
  
  vec3 edge0 = v1 - v0;
  vec3 edgePerp = cross(edge0, planePoint - v0);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge1 = v2 - v1;
  edgePerp = cross(edge1, planePoint - v1);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge2 = v0 - v2;
  edgePerp = cross(edge2, planePoint - v2);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);


  if (triangleHitMask)
    return triangleDist;
  else
    return FLT_MAX;
}
float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}

#define MAX_BOUNCE 1
#define SAMPLE_COUNT 1
void main() {
  vec4 pixel = vec4(0.0);

  for (int s = 0; s < SAMPLE_COUNT; s++)
    {
      vec4 radiance = vec4(0.0);
      vec3 center = vec3(0.0);
      vec3 width = vec3(5.0);
      vec3 offset = vec3(gl_GlobalInvocationID.xyz) / vec3(imageSize(probeInfo));
      //imageCoords -> 0-1
      offset -= 0.5; //0-1 : -0.5 - 0.5
      offset *= width; //-0.5 - 0.5 : -width/2 : width/2
      
      //offset -= 0.5; //-0.5 - 0.5
      //offset *= 2.0; //-1.0 - 1.0
        //1.0 * vec3(imageSize(probeInfo));
      //offset = vec3(offset.x > -0.1 && offset.x < 0.1);
      //offset = vec3(offset.y < -0.0);
      vec3 rayOrigin = center + offset;
      //pixel = vec4(offset, 1.0);
      //break;
        
      vec3 rayDir = vec3(0.0,1.0,0.0);
      for (int bounce = 0; bounce < MAX_BOUNCE; bounce++)
	{
	  float dist = FLT_MAX;
	  vec3 bounceNormal =  vec3(0.0,0.0,1.0);
	  vec4 emitColour = vec4(0.0);
	  uint matIndex = -1;

	  for (int i = 0; i < 136; i+=3)
	    {
	      Vertex v0 = vertices[i + 0];
	      Vertex v1 = vertices[i + 1];
	      Vertex v2 = vertices[i + 2];
	      vec3 normal = v0.normal;
	      float testDist = triangleTest(rayOrigin, rayDir,
					    v0.position, v1.position, v2.position,
					    normal);

              vec3 avg = v0.position + v1.position + v2.position / 3.0;
              //float tDist = dot(rayOrigin - avg,rayOrigin - avg);
              //if (tDist < dist)
              //  dist = tDist;

	      if (testDist < dist )
		{
		  matIndex = v0.materialIndex;
		  dist = testDist;
		  bounceNormal = rayDir - 2.0 * normal * dot(rayDir, normal);
                }

	    }

          if (dist == FLT_MAX) break;//pixel = vec4(-FLT_MAX);
      
	  if (matIndex == 0) //emissive
	    {
	      emitColour = vec4(1.0,0.9,0.6,1.0);
              pixel += emitColour;//vec4(dist / 1.0);
	    }

	  vec3 randomBounce = normalize(bounceNormal - vec3(rand(rayDir.xy),
							    rand(rayDir.xz),
							    rand(rayDir.zy)) / 50.0f);
	  
          //pixel += emitColour;
	}
      //pixel += radiance;
    }
  //pixel = vec4(gl_GlobalInvocationID.xyz - 5.0,1.0);
  imageStore(probeInfo, ivec3(gl_GlobalInvocationID.xyz), pixel);
}
