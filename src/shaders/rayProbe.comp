#version 450

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  uint materialIndex;
};
struct LineVertex {
  vec3 pos;
  vec3 colour;
};

#define FLT_MAX 1000000.0
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
layout(std140, set = 1, binding = 2) writeonly buffer DebugLines {
   LineVertex lines[];
};

layout(set = 0, binding = 2, rgba8) uniform writeonly image2D frameBuffer; //Temp, its from the ray pipeline descriptor set
layout(set = 1, binding = 0, rgba8) uniform writeonly image3D probeInfo;
layout(set = 1, binding = 1, rgba8) uniform writeonly image3D probeInfo2;
//layout(set = 1, binding = 1) uniform sampler3D probeSampler;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout( push_constant ) uniform cascadeConstant {
  int cascade;
  int quadrant;
  int allQuadrants;
} cascadeInfo;

float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2, vec3 normal)
{
	      
  float denom = dot(normal, rayDirection);

  float triangleOffset = -dot(normal, v2); //like the planeDist but for the triangle
  float triangleDist = -(dot(normal, rayOrigin) + triangleOffset) / denom; 
		
  bool triangleHitMask = true;

  if (triangleDist < 0.0001)
    return FLT_MAX;
  vec3 planePoint = (rayDirection * triangleDist) + rayOrigin;
  
  vec3 edge0 = v1 - v0;
  vec3 edgePerp = cross(edge0, planePoint - v0);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge1 = v2 - v1;
  edgePerp = cross(edge1, planePoint - v1);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge2 = v0 - v2;
  edgePerp = cross(edge2, planePoint - v2);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);


  if (triangleHitMask)
    return triangleDist;
  else
    return FLT_MAX;
}
float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}

float pi = 3.14159;
float goldenRatio = (1.0 + pow(5.0,0.5))/2.0;
#define MAX_BOUNCE 1
//#define SAMPLE_COUNT 6
void main() {
  vec4 pixel = vec4(0.0);


  int cascadeIndex = 0;//int(gl_GlobalInvocationID.z);
  int SAMPLE_COUNT = cascadeIndex == 0 ? 8 : 64;
  vec4 radiance = vec4(0.0);
  vec3 center = vec3(0.0, 0.0, 0.0);
  vec3 width = vec3(2.2);
      
  //determine what quadrant we're in
  //Assume powers of two
  int dirTilingCount = cascadeIndex == 0 ? 2 : 4;
  ivec3 dirTile = ivec3(int(float(gl_GlobalInvocationID.x) / imageSize(probeInfo).x * dirTilingCount),
			int(float(gl_GlobalInvocationID.y) / imageSize(probeInfo).y * dirTilingCount),
			int(float(gl_GlobalInvocationID.z) / imageSize(probeInfo).z * dirTilingCount));
  int dirIndex = dirTile.x + dirTile.y * dirTilingCount + dirTile.z * dirTilingCount * dirTilingCount;

  float theta = 2 * pi * dirIndex / goldenRatio;
  float phi = acos(1 - 2*(dirIndex) / SAMPLE_COUNT);
  vec3 rayDir = vec3(cos(theta) * sin(phi), sin(theta) * sin(phi), cos(phi));
    //vec3 rayDir = dirs[dirIndex];
  
  //Where are we inside this quadrant
  //0-quadrantSize in pixels
  ivec3 localInvocation = ivec3(gl_GlobalInvocationID) - dirTile * (imageSize(probeInfo) / dirTilingCount);

  
  int gridSize = 32 / (cascadeIndex + 1);
  int tilingCount = 8;// / (cascadeIndex + 1);
  //0-gridSize
  vec3 invocationCoord = vec3(
                              localInvocation.x % gridSize, //TODO uniform of size
                              localInvocation.x / gridSize / tilingCount +
                              (localInvocation.y / gridSize) * tilingCount, //TODO uniform of size
                              localInvocation.y % gridSize //TODO uniform of size
                              );
  vec3 offset = localInvocation;///invocationCoord;
  offset /= gridSize;
  offset -= 0.5;
  offset *= width;

  //  pixel = vec4(vec2(invocationCoord).xy / gridSize, gl_GlobalInvocationID.z,1.0);
  pixel = vec4(offset,1.0);
  //pixel = vec4(offset,1.0);
  imageStore(probeInfo, ivec3(gl_GlobalInvocationID.xyz), pixel);
  if (gl_GlobalInvocationID.z == cascadeInfo.cascade)
    {
      uint linearIdx = (gl_GlobalInvocationID.x +
			imageSize(probeInfo).y * gl_GlobalInvocationID.y +
			imageSize(probeInfo).y * imageSize(probeInfo).z * gl_GlobalInvocationID.z 
			)
	* 2;
      lines[linearIdx + 0].pos = center + offset;
      lines[linearIdx + 0].colour = rayDir;//pixel.rgb + 0.1;
      lines[linearIdx + 1].pos = center + offset + rayDir * 0.1;
      lines[linearIdx + 1].colour = rayDir;//pixel.rgb + 0.1;
    }

  return;

  vec3 rayOrigin = center + offset;
  float dist = FLT_MAX;
  vec4 emitColour = vec4(0.0);
  uint matIndex = -1;

  for (int i = 0; i < 136; i+=3)
    {
      Vertex v0 = vertices[i + 0];
      Vertex v1 = vertices[i + 1];
      Vertex v2 = vertices[i + 2];
      vec3 normal = v0.normal;
      float testDist = triangleTest(rayOrigin, rayDir,
                                    v0.position, v1.position, v2.position,
                                    normal);

      vec3 avg = v0.position + v1.position + v2.position / 3.0;

      if (testDist < dist && dist > 0.0 && dot(normal, rayDir) < 0.0)
        {
          matIndex = v0.materialIndex;
          dist = testDist;
        }
    }

  if (matIndex == 0) //emissive
    {
      emitColour = vec4(1.0,0.9,0.6,1.0);
      pixel = emitColour;
    }
  else if (dist < FLT_MAX)
    {
      //pixel = vec4(dist / 2.0);
    }
  pixel.a = 1.0;
  imageStore(probeInfo, ivec3(gl_GlobalInvocationID.xyz), pixel);
  if (gl_GlobalInvocationID.z == cascadeInfo.cascade)
    {
      uint linearIdx = (gl_GlobalInvocationID.x * imageSize(probeInfo).x + gl_GlobalInvocationID.y) * 2;
      lines[linearIdx + 0].pos = center + offset;
      lines[linearIdx + 0].colour = pixel.rgb + 0.3;
      lines[linearIdx + 1].pos = center + offset + rayDir * 0.01;
      lines[linearIdx + 1].colour = pixel.rgb + 0.3;
    }

}
