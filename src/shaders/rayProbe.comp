#version 450

struct Vertex {
  vec3 position;
  vec3 normal;
  vec2 texCoord;
  uint materialIndex;
};
#define FLT_MAX 1000000.0
layout(std140, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, binding = 1) readonly buffer Indices {
   uint indices[];
};

layout(set = 1,binding = 0, rgba8) uniform writeonly image3D probeInfo;
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

float triangleTest(vec3 rayOrigin, vec3 rayDirection, vec3 v0, vec3 v1, vec3 v2, vec3 normal)
{
	      
  float denom = dot(normal, rayDirection);

  float triangleOffset = -dot(normal, v2); //like the planeDist but for the triangle
  float triangleDist = -(dot(normal, rayOrigin) + triangleOffset) / denom; 
		
  bool triangleHitMask = true;

  if (triangleDist < 0.0001)
    return FLT_MAX;
  vec3 planePoint = (rayDirection * triangleDist) + rayOrigin;
  
  vec3 edge0 = v1 - v0;
  vec3 edgePerp = cross(edge0, planePoint - v0);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge1 = v2 - v1;
  edgePerp = cross(edge1, planePoint - v1);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);

  vec3 edge2 = v0 - v2;
  edgePerp = cross(edge2, planePoint - v2);
  triangleHitMask = triangleHitMask && (dot(normal, edgePerp) > 0.0);


  if (triangleHitMask)
    return triangleDist;
  else
    return FLT_MAX;
}
float rand(vec2 co){
  return ((fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453))-0.5) * 2.0;
}



#define MAX_BOUNCE 2
#define SAMPLE_COUNT 1
void main() {
  vec4 pixel = vec4(gl_GlobalInvocationID.xyz / 20.0, 1.0);
  imageStore(probeInfo, ivec3(gl_GlobalInvocationID.xyz), pixel);
}
