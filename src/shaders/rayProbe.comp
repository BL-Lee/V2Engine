#version 450

#include "Vertex.comp"
#include "BVH.comp"

#define FLT_MAX 1000000.0
layout(std140, set = 0, binding = 0) readonly buffer Vertices {
   Vertex vertices[];
};
layout(std140, set = 0, binding = 1) readonly buffer Indices {
   uint indices[];
};
layout(std140, set = 0, binding = 3) readonly buffer BVH {
   BVHNode nodes[];
};
layout(std140, set = 0, binding = 4) readonly buffer ModelMatrices {
   mat4 modelMatrices[];
};

layout(std140, set = 1, binding = 1) writeonly buffer DebugLines {
   LineVertex lines[];
};

layout(set = 0, binding = 2, rgba8) uniform restrict writeonly image2D frameBuffer; //Temp, its from the ray pipeline descriptor set
layout(set = 1, binding = 0, rgba8) uniform restrict image3D probeInfo;
layout(set = 1, binding = 2) uniform sampler3D probeSampler;

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout( push_constant ) uniform cascadeConstant {
  int cascade;
  int quadrant;
  float start;
  float end;
  int lineView;
} cascadeInfo;

#include "rayHelpers.comp"

float pi = 3.14159;
vec3 center = vec3(0.0, 1.0, 0.0); //Todo: uniform
vec3 width = vec3(2.5);

//Get uv in texture, local to quadrant
vec3 worldPosToImageUV(vec3 worldPos, int cascadeIndex)
{
  vec3 probeTexLocation = (worldPos - center) / width;
  probeTexLocation += 0.5;
  int dirCount = int(pow(8, cascadeIndex + 1)); //TODO unhardcode
  int dirTilingCount = int(pow(2, cascadeIndex + 1)); //TODO cube root
      
  //scale down to quadrant 
  vec3 quadrantLocalCoord = probeTexLocation / vec3(dirTilingCount, dirTilingCount, dirTilingCount);
  
  return quadrantLocalCoord;
}

vec3 initialDirs[8] = {
  vec3(-1,-1,-1),
  vec3( 1,-1,-1),
  vec3(-1, 1,-1),
  vec3( 1, 1,-1),
  vec3(-1,-1, 1),
  vec3( 1,-1, 1),
  vec3(-1, 1, 1),
  vec3( 1, 1, 1)
};

vec3 getDirFromIndex(int dirIndex, int cascadeIndex)
{
  int SAMPLE_COUNT = int(pow(8, cascadeIndex + 1)); //8, 64, 64*8
  int tmpIndex = dirIndex;
  int tmpSampleCount = SAMPLE_COUNT;
  int initDirIdx = int(dirIndex*8.0 / tmpSampleCount);
  tmpIndex = dirIndex - initDirIdx * (tmpSampleCount / 8);
  

  vec3 rayDir = initialDirs[initDirIdx];


  float contribution = 0.5;//Arbitrary, higher spreads them out, lower bunches them. This is what looked good for demos/4layers

  tmpSampleCount /= 8;
  for (int i = 0; i < cascadeIndex; i++)
    {
      tmpSampleCount = max(tmpSampleCount, 1);
      int initDirIdx = int(tmpIndex * 8.0 / tmpSampleCount);
      vec3 nextDir = initialDirs[initDirIdx]; 
      tmpIndex -= initDirIdx * tmpSampleCount / 8;
      tmpSampleCount /= 8;
      rayDir += nextDir * contribution;
      contribution *= 0.5;
    }

  rayDir = normalize(rayDir);
  return rayDir;
}

void main() {
  vec4 pixel = vec4(0.0);

  int cascadeIndex = cascadeInfo.cascade;//int(gl_GlobalInvocationID.z);
  int SAMPLE_COUNT = int(pow(8, cascadeIndex + 1)); //8, 64, 64*8
  vec4 radiance = vec4(0.0);
  //determine what quadrant we're in
  //Assume powers of two
  int dirTilingCount = int(pow(2, cascadeIndex + 1)); //2, 4, 8

  
  ivec3 dirTile = ivec3(int(float(gl_GlobalInvocationID.x) / imageSize(probeInfo).x * dirTilingCount),
			int(float(gl_GlobalInvocationID.y) / imageSize(probeInfo).y * dirTilingCount),
			int(float(gl_GlobalInvocationID.z) / imageSize(probeInfo).z * dirTilingCount));
  int dirIndex = dirTile.x + dirTile.y * dirTilingCount + dirTile.z * dirTilingCount * dirTilingCount;

  vec3 rayDir = getDirFromIndex(dirIndex, cascadeIndex);  

  int gridSize = 32 / int(pow(2, cascadeIndex));
  //Where are we inside this quadrant
  //0-quadrantSize in pixels
  ivec3 localInvocation = ivec3(gl_GlobalInvocationID) - dirTile * (imageSize(probeInfo) / dirTilingCount);

  vec3 offset = localInvocation + 0.5;//0.5 to offset to midpoint
  offset /= gridSize;
  offset -= 0.5;
  offset *= width;

  vec3 rayOrigin = center + offset + (rayDir * cascadeInfo.start);
  float maxDist = cascadeInfo.end - cascadeInfo.start;
  vec4 emitColour = vec4(0.0);
  
  TraceResult result = trace(rayOrigin, rayDir, maxDist);
  uint matIndex = result.matIndex;
  float dist = result.dist;

  if (matIndex == 0) //emissive
    {
      emitColour = vec4(1.0,0.9,0.4,1.0) * 10.0;
      //float R = 1.0;//light falloff
      //emitColour /= 1 + (dist * R) * (dist * R);
      pixel = emitColour;
      pixel.a = 1.0;
    }
  else if (matIndex == 1) //diffuseGrey
    {
      pixel = vec4(0.5,0.5,0.5,1.0) * 0.02;
      pixel.a = 1.0;
    }
  else if (matIndex == 2) //red
     {
      pixel = vec4(1.0,0.0,0.0,1.0) * 0.02;
      pixel.a = 1.0;
    }
  else if (matIndex == 3) //green
    {
      pixel = vec4(0.0,1.0,0.0,1.0) * 0.02;
      pixel.a = 1.0;
    }

  //Combine information from previous pass
  if (cascadeIndex < 3 && matIndex == -1)
    {
      vec3 upperCoord = worldPosToImageUV(center + offset, cascadeIndex + 1);
      int upperDirCount = int(pow(8, cascadeIndex + 1 + 1)); //TODO unhardcode
      int upperDirTilingCount = int(pow(2, cascadeIndex + 1 + 1)); //TODO cube root

      vec4 contributingPixel = vec4(0.0);
      int contributingDirs = 0;
      int upperDirIndex = dirIndex * 8;
      for (int dir = upperDirIndex; dir < upperDirIndex + 8; dir++)
	{
	  vec3 quadrantOffset = vec3(dir % upperDirTilingCount,
				     (dir / upperDirTilingCount) % upperDirTilingCount,
				     dir / (upperDirTilingCount * upperDirTilingCount)) / upperDirTilingCount;
	  vec3 texCoord = upperCoord + quadrantOffset;
	  vec4 val = texture(probeSampler, texCoord);
	  contributingPixel += val / 8.0;

	}
      pixel += contributingPixel;

    }
  if (cascadeIndex != 0)
    pixel.a = 1.0;

  //if (cascadeIndex == 0)
    //   pixel.a = 1.0;
  imageStore(probeInfo, ivec3(gl_GlobalInvocationID.xyz), pixel);

  if (cascadeIndex == cascadeInfo.lineView)
  {
    uint linearIdx = (gl_GlobalInvocationID.x +
		      imageSize(probeInfo).y * gl_GlobalInvocationID.y +
		      imageSize(probeInfo).y * imageSize(probeInfo).z * gl_GlobalInvocationID.z 
		      )
      * 2;
    if (matIndex == -1)
      maxDist = 0;
    lines[linearIdx + 0].pos = rayOrigin;
    lines[linearIdx + 0].colour = pixel.rgb;
    lines[linearIdx + 1].pos = rayOrigin + rayDir * maxDist;//dist;
    lines[linearIdx + 1].colour = pixel.rgb;
  }


}
